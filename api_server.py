from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, ImageMessage, TextSendMessage
import requests, cv2, numpy as np
from pyzbar.pyzbar import decode
import io
import os  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á Environment Variables

app = Flask(__name__)

# üß© ‡πÉ‡∏ä‡πâ Environment Variables ‡πÅ‡∏ó‡∏ô‡πÉ‡∏™‡πà‡∏ï‡∏£‡∏á ‡πÜ
CHANNEL_ACCESS_TOKEN = os.getenv("CHANNEL_ACCESS_TOKEN")
CHANNEL_SECRET = os.getenv("CHANNEL_SECRET")

line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

# ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
@handler.add(MessageEvent, message=TextMessage)
def handle_text(event):
    msg = event.message.text.lower()
    if "‡∏™‡∏•‡∏¥‡∏õ" in msg or "‡∏ï‡∏£‡∏ß‡∏à" in msg:
        reply = "üì∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))

# ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
@handler.add(MessageEvent, message=ImageMessage)
def handle_image(event):
    message_content = line_bot_api.get_message_content(event.message.id)
    image_data = io.BytesIO(message_content.content)
    img = cv2.imdecode(np.frombuffer(image_data.read(), np.uint8), cv2.IMREAD_COLOR)

    decoded_objs = decode(img)
    if not decoded_objs:
        reply = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code ‡πÉ‡∏ô‡∏™‡∏•‡∏¥‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    else:
        data = decoded_objs[0].data.decode('utf-8')
        if "000201" in data:
            reply = check_slip_detail(data)
        else:
            reply = "‚ö†Ô∏è QR Code ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"

    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))

def check_slip_detail(qr_data):
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    result = {
        "status": "valid",
        "bank": "SCB",
        "amount": "500.00",
        "date": "21/10/2025 10:12"
    }

    if result["status"] == "valid":
        return f"‚úÖ ‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£: {result['bank']}\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: {result['amount']} ‡∏ö‡∏≤‡∏ó\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô: {result['date']}"
    else:
        return "‚ùå ‡∏™‡∏•‡∏¥‡∏õ‡∏õ‡∏•‡∏≠‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
