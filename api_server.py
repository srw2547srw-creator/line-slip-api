from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, ImageMessage, TextSendMessage
import requests, cv2, numpy as np, io

app = Flask(__name__)

# üß© LINE credentials
CHANNEL_ACCESS_TOKEN = "wGObwEuHAdaO21oZJRoPx0Yt/DZAWN4ZyU2v9xk3JT4cSZ1DqxUb9IxpEgCCWm+eI+tv2XCtDBSHl7WvbcXfA0N7ePQGgrOnT2Ui2mfi8EpDjPfRsU4Dybz6AHCdjTSYn3ZRHhJAAkA7es1BCpojEgdB04t89/1O/w1cDnyilFU="
CHANNEL_SECRET = "784eb2c57f781e4f0fed63a065f0d251"

line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)


@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'


# üó®Ô∏è ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
@handler.add(MessageEvent, message=TextMessage)
def handle_text(event):
    msg = event.message.text.lower()
    if "‡∏™‡∏•‡∏¥‡∏õ" in msg or "‡∏ï‡∏£‡∏ß‡∏à" in msg:
        reply = "üì∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))


# üñºÔ∏è ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á ‚Äú‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‚Äù
@handler.add(MessageEvent, message=ImageMessage)
def handle_image(event):
    try:
        # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å LINE
        message_content = line_bot_api.get_message_content(event.message.id)
        image_data = io.BytesIO(message_content.content)

        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OpenCV
        img = cv2.imdecode(np.frombuffer(image_data.read(), np.uint8), cv2.IMREAD_COLOR)

        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à QR ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        gray = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]

        # üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ QR Code ‡∏î‡πâ‡∏ß‡∏¢ OpenCV
        detector = cv2.QRCodeDetector()
        data, points, _ = detector.detectAndDecode(gray)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if not data:
            reply = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code ‡πÉ‡∏ô‡∏™‡∏•‡∏¥‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        else:
            print("üìÑ QR Raw Data:", data[:200])  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏ô log

            # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞ QR ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Slip ‡∏à‡∏£‡∏¥‡∏á
            slip_patterns = [
                "000201",               # PromptPay base
                "A000000677010112",     # Thai QR Payment
                "billpayment",          # ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô slip ‡∏ö‡∏≤‡∏á‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
                "promptpay",            # keyword ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                "qrpayment",            # keyword ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                "SCB", "BBL", "KTB", "BAY"  # ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å
            ]

            if any(keyword.lower() in data.lower() for keyword in slip_patterns):
                reply = check_slip_detail(data)
            else:
                reply = f"‚ö†Ô∏è ‡∏û‡∏ö QR ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô\n(‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•):\n{data[:150]}..."

        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))

    except Exception as e:
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"))


def check_slip_detail(qr_data):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
    ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° API ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    """
    # üîé ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if "promptpay" in qr_data.lower() or "a000000677010112" in qr_data.lower():
        result = {
            "status": "valid",
            "bank": "SCB",
            "amount": "500.00",
            "date": "21/10/2025 10:12"
        }
        return (
            f"‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß: ‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
            f"‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£: {result['bank']}\n"
            f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: {result['amount']} ‡∏ö‡∏≤‡∏ó\n"
            f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô: {result['date']}"
        )
    else:
        return "‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö QR ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÑ‡∏î‡πâ"



if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
